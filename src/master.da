import logging
import sys
import csv
import config as cfg
import constants as const
import xmltodict, json
import pandas as pd
import random
import time

def get_logger(name, path):
    logger = logging.getLogger(name)
    logger.setLevel(logging.DEBUG)
    handler = logging.FileHandler(path, mode='w')
    handler.setLevel(logging.DEBUG)
    logger.addHandler(handler)
    return logger

class DBEmulator(process):
    def setup(config):
        self.conf = config['db_config']
        self.minLatency = config['minDBlatency']
        self.maxLatency = config['maxDBlatency']
        self.logger = get_logger('db_logger', config['db_log'])
        self.tables = {}
        
        with open(self.conf, 'r') as f:
            db_data = f.read()
        
        json_content = json.loads(json.dumps(xmltodict.parse(db_data)))['db']
        
        json_schema = json_content['schema']
        for schema in json_schema:
            self.tables[schema] = pd.DataFrame([], columns=json_schema[schema]['column'])

        json_data = json_content['data']    

        for table in json_data:
            self.tables[table] = pd.read_json(json.dumps(json_data[table]))
        
    def run():
        print(self.tables)
        await(False)
    
    def _read(df, data):
        row = df[(df['id'] == data['id'])]
        if len(row) > 0:
            return row.iloc[0].to_json()
        else:
            new_data = []
            # print( list(df.cols))
            cols = df.columns
            
            for col in cols:
                for k in data:
                    df.ix[len(df), k] =  data[k]

            # df.loc[] = data                
            return data

    def _write(df, data):
        index = df.loc[(df['id'] == data['id'])].index.tolist()
        if len(index) > 0:
            for k in data:
                df.ix[index[0], k] =  data[k]
        else:
            df.loc[len(df)] =  data

        return data

    def _op(fn, data):
        # should we use this flag or jus delay for every operation ?
        # should we delay the operation or literally mimic the visibility?
        # if later, we gotta think more about the design.. former is jus 
        # removing the condition and jus delay for everything
        if data['delay']:
            time.sleep(random.randint(self.minLatency,self.maxLatency))
        
        payload = fn(self.tables[data['table']], data['payload'])
        print (self.tables[data['table']])
        
        return payload
        

    def receive(msg=('DB_READ', data), from_=p):
        self.logger.info('[DB_READ_REQ] payload:{}'.format(data))
        payload = self._op(self._read, data)
        send(('DB_READ_RESPONSE', payload),to=p)
        self.logger.info('[DB_READ_RESP] payload:{}'.format(data))

    def receive(msg=('DB_WRITE', data), from_=p):
        self.logger.info('[DB_WRITE_REQ] payload:{}'.format(data))
        payload = self._op(self._write, data)
        send(('DB_WRITE_RESPONSE', payload),to=p)
        self.logger.info('[DB_WRITE_RESP] payload:{}'.format(data))

# Client corresponds to Application instance
class ClientP(process):
    def setup(coord_ps):
        # print(coord_ps)
        pass

    def run():
        # send(('DB_WRITE',{'table':'employee', 
        #                   'payload':{'id':1, 'name':'emp10'},
        #                   'delay':True}),to=coord_ps)
        send(('DB_READ',{'table':'employee', 
                          'payload':{'id':10},
                          'delay':True}),to=coord_ps)
        # output("Starting Application Instance")
        await(False)

    def receive(msg=('DB_READ_RESPONSE',data), from_=p):
        pass
        # output("Response received in client!!")
    def receive(msg=('DB_WRITE_RESPONSE',data), from_=p):
        pass
        # output("Response received in client!!")



class SubCoordP(process):
    def setup():
        pass

    def run():
        await(False)

    def receive(msg= ('APP_EVALUATION_REQUEST',),from_=p):
        output("Response received in sub process!!")
        send(('APP_EVALUATION_RESPONSE',),to=p)


class ResCoordP(process):
    def setup():
        pass

    def run():
        pass

    def receive(msg= ()):
        pass


class WorkerP(process):
    def setup():
        pass

    def run():
        pass

    def receive(msg= ()):
        pass


def main():
    config_fpath = sys.argv[1] if len(sys.argv) > 1 else "../config/main-config.json"
    config = cfg.load_config(config_fpath)
    # do something with config
    config(channel="fifo", clock="Lamport")

    db_ps = new(DBEmulator, num=1)
    setup(db_ps,(config,))
    start(db_ps)

    # coord_ps = new(SubCoordP, num=config['num_coords'])
    # setup(coord_ps,())
    
    cli_ps = new(ClientP, num=config['num_clients'])
    setup(cli_ps,(db_ps,))
    
    # start(coord_ps)    
    start(cli_ps)