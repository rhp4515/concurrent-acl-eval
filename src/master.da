import sys
import csv
import config as cfg
import constants as const
import xmltodict, json
import pandas as pd


# Client corresponds to Application instance
class DBEmulator(process):
    def setup(conf, minLatency, maxLatency):
        self.conf = conf
        self.minLatency = minLatency
        self.maxLatency = maxLatency
        print('SETTING UP DB')
        
        with open(self.conf, 'r') as f:
            db_data = f.read()
        
        json_content = json.loads(json.dumps(xmltodict.parse(db_data)))['db']
        json_data = json_content['data']
        self.employee = pd.read_json(json.dumps(json_data['employee']))
        self.customer = pd.read_json(json.dumps(json_data['customer']))
        self.bank = pd.read_json(json.dumps(json_data['bank']))
        self.movie = pd.read_json(json.dumps(json_data['movie']))
        json_schema = json_content['schema']
        
        emp_bank_hist_schema = json_schema['emp_bank_hist']['column']
        self.emp_bank_hist = pd.DataFrame([], columns=emp_bank_hist_schema)

        cust_movie_hist_schema = json_schema['cust_movie_hist']['column']
        self.cust_movie_hist = pd.DataFrame([], columns=emp_bank_hist_schema)

    def run():
        print(self.employee)
        print(self.customer)
        print(self.bank)
        print(self.movie)
        print(self.minLatency)
        print(self.maxLatency)
        print(self.emp_bank_hist)
        print(self.cust_movie_hist)
        print('BUILDING DB')
        await(False)

    def receive(msg=('DB_READ', data), from_=p):
        print(data)
        output("Response received!!")
        send(('DB_READ_RESPONSE',{'key':'value1'}),to=p)

    def receive(msg=('DB_WRITE', data), from_=p):
        print(data)
        output("Response received!!")
        send(('DB_WRITE_RESPONSE',{'key':'value1'}),to=p)

# Client corresponds to Application instance
class ClientP(process):
    def setup(coord_ps):
        print(coord_ps)

    def run():
        send(('DB_WRITE',{'key':'value'}),to=coord_ps)
        output("Starting Application Instance")
        await(False)

    def receive(msg=('DB_WRITE_RESPONSE',data), from_=p):
        print(data)
        output("Response received in client!!")



class SubCoordP(process):
    def setup():
        pass

    def run():
        await(False)

    def receive(msg= ('APP_EVALUATION_REQUEST',),from_=p):
        output("Response received in sub process!!")
        send(('APP_EVALUATION_RESPONSE',),to=p)


class ResCoordP(process):
    def setup():
        pass

    def run():
        pass

    def receive(msg= ()):
        pass


class WorkerP(process):
    def setup():
        pass

    def run():
        pass

    def receive(msg= ()):
        pass


def main():
    config_fpath = sys.argv[1] if len(sys.argv) > 1 else "../config/main-config.json"
    config = cfg.load_config(config_fpath)
    # do something with config
    config(channel="fifo", clock="Lamport")

    db_ps = new(DBEmulator, num=1)
    setup(db_ps,(config['db_config'], config['minDBlatency'], 
                 config['maxDBlatency']))
    start(db_ps)

    coord_ps = new(SubCoordP, num=config['num_coords'])
    setup(coord_ps,())
    
    cli_ps = new(ClientP, num=config['num_clients'])
    setup(cli_ps,(db_ps,))
    
    start(coord_ps)    
    start(cli_ps)