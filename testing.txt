Testing Documentation

The main method fecthes all the testing scenarios from the main-config.json and runs
them. The logs for each test cases are distinguished by the suffix name 
e.g waiting_condition, conflict_check. The logs for each unique
process is created in separate file with its port number appended to its name.

We have run the test scenarios once and stored all the logs in respective 
folders inside the log folder. The initial and final db state are also logged 
in the corresponding db_log file.

How did we simulate ?

Each test scenario uses its own list of requests from the config file. We have 
introduced the delay parameters for each requests if needed. We introduce
manual delay if the correspoing flag is set against the request.

Scenarios

***************************************
#1 Waiting Pending Might Read Condition
***************************************

	NUM_CLIENTS: 		 2
	NUM_COORDS:		 	 2
	WORKER_COUNT: 		 2

	REQUESTS FILE: 		 '../config/waiting_condition_reqs.xml'
	LOG_SUFFIX: 		 waiting_condition,

	EXPECTED_DB_CONTENT: db_waiting_condition.log contains final db state. 
						 Expected db_dump:
						 ('employee', '1', 'history'): 'bank A'
		
**********************************************
#2 Restart immediately after worker completion
**********************************************
			
	NUM_CLIENTS: 		 2
	NUM_COORDS:		 	 2
	WORKER_COUNT: 		 2

	REQUESTS FILE: 		 '../config/conflict_check_reqs.xml'
	LOG_SUFFIX: 		 conflict_check,

	EXPECTED_DB_CONTENT: db_conflict_check.log contains final db state. 
						 Expected db_dump:
						 ('movie', 'A', 'viewed'): 'true' 
						 ('movie', 'A', 'viewCount'): 2


***************************************************
#3 Restart after waiting for all Pending Might Read
***************************************************
			
	NUM_CLIENTS: 		 2
	NUM_COORDS:		 	 3
	WORKER_COUNT: 		 2

	REQUESTS FILE: 		 '../config/conflict_check2_reqs.xml'
	LOG_SUFFIX: 		 conflict_check2,

	EXPECTED_DB_CONTENT: db_conflict_check2.log contains final db state. 
						 Expected db_dump:
						 ('movie', 'A', 'viewed'): 'true' 
						 ('movie', 'A', 'viewCount'): 2


************************
#4 Read Write Starvation
************************

	NUM_CLIENTS: 		 2
	NUM_COORDS:		 	 2
	WORKER_COUNT: 		 2

	REQUESTS FILE: 		 '../config/write_starvation_reqs.xml'
	LOG_SUFFIX: 		 write_starvation,

	EXPECTED_DB_CONTENT: db_write_starvation.log contains final db state. 
						 Expected db_dump:
						 ('movie', 'A', 'viewed'): 'true' 
						 ('movie', 'A', 'viewCount'): 2

***************************
#5 Read Write No Starvation
***************************

	NUM_CLIENTS: 		 2
	NUM_COORDS:		 	 2
	WORKER_COUNT: 		 2

	REQUESTS FILE: 		 '../config/read_write_no_starvation_reqs.xml'
	LOG_SUFFIX: 		 read_write_no_starvation,

	EXPECTED_DB_CONTENT: db_read_write_no_starvation.log contains final db state. 
						 Expected db_dump:
						 ('movie', 'A', 'viewed'): 'true' 
						 ('movie', 'A', 'viewCount'): 2

****************
#6 Misprediction
****************

	NUM_CLIENTS: 		 1
	NUM_COORDS:		 	 2
	WORKER_COUNT: 		 1

	REQUESTS FILE: 		 '../config/misprediction_reqs.xml'
	LOG_SUFFIX: 		 misprediction,

	EXPECTED_DB_CONTENT: db_misprediction.log contains final db state. 
						 Expected db_dump:
						 ('movie', 'A', 'viewed'): 'true' 
						 ('movie', 'A', 'viewCount'): 2

**************
#6 Stress Test
**************

This test scenario is to engage all the process (client, sub_coord, res_coord, 
worker, db busy throughout the execution. This process generates the requests 
to send based on the specified subjects, resources and action in the following 
config. The total request count is computed based on the number of clients and 
the workload of each client. It evenly splits the request to all the application
clients.

	
	NUM_CLIENTS: 		 10
	NUM_COORDS: 	 	 10
	WORKER_COUNT: 		 10

	WORKLOAD: 		 	 50

	REQUESTS FILE: 		 '../config/stress_res.json'
	LOG_SUFFIX: 		 stress_test,
	
	SUBJECTS:			 ["A","B","C","D","E","F","G","H","I","J"]
	RESOURCES:			 ["a","b","c","d","e","f","g","h","i","j"]

	EXPECTED_DB_RESULT:	 '../config/stress_truth.json'	
	EXPECTED_DB_CONTENT: db_stress_test.log contains final db state. 
						 